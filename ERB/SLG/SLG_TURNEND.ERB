;-------------------------------------------------
;戦略フェイズ終了時の処理
;-------------------------------------------------
@SLG_TURNEND
;#; #DIM USETIME
;#; #DIM USETIME_AI
#DIM 勢力行動順, MAX_COUNTRY
#DIM 勢力
#DIM 表示フラグ
;国家関係マップの作成(処理の高速化)
CALL TMP_CREATE_RELATION_MAP

;野盗は都市をもってたら外交できる
LOCAL = GET_COUNTRY_FROM_ID(SP_COUNTRY_ID:(特殊勢力_野盗))
IF LOCAL > 0 && GET_OWN_CITY(LOCAL) > 0
	COUNTRY_IS_CLOSED:LOCAL = 0
ELSEIF LOCAL > 0 && GET_OWN_CITY(LOCAL) == 0
	;ここでフラグたてても、戦略ターン中に野盗が都市全ロスト→野盗対象の外交　でエラー落ちする
	;ねんのため勃てておくが、信頼性はない
	COUNTRY_IS_CLOSED:LOCAL = 1
ENDIF

;行動順の決定
CALL FISHER_YATES_SHAFFLE(MAX_COUNTRY)
ARRAYCOPY "SHAFFLE_ARRAY", "勢力行動順"


;国家間の隣接関係マップの作成(処理の高速化)
CALL TMP_CREATE_COUNTRY_NEIBORING_MAP
;接続マップの作成
CALL TMP_CREATE_CONNECTION_MAP
;飛び地マップの作成
CALL TMP_CREATE_ENCLAVE_MAP
;ユニット関連
CALL TMP_CREATE_UNIT_MAP
CALL TMP_CREATE_COUNTRY_NEIBORING_MAP
;重要性の設定
CALL TMP_CREATE_OFFENSIVE_IMPORTANCE_MAP
CALL TMP_CREATE_DEFENSIVE_IMPORTANCE_MAP
;リスクと侵攻
CALL TMP_CREATE_IS_INVADABLE_MAP
CALL TMP_CREATE_CITY_RISK_MAP
;士官が行動可能な状態にあるかどうかのリストを作成
CALL TMP_CREATE_IS_FREE_MAP
CALL TMP_CREATE_POLITICS_POWER_MAP
CALL TMP_CREATE_COOKING_POWER_MAP
;都市数と経済を用意
CALL TMP_CREATE_OWN_CITY_MAP
CALL TMP_CREATE_SUM_ECONOMY_MAP
;兵力を用意
CALL TMP_CREATE_SUM_SOLDIER_MAP
CALL TMP_CREATE_UNION_TARGET_MAP
CUSTOMDRAWLINE =
PRINTFORML 国家内政・外交フェイズ
CUSTOMDRAWLINE =

; AI
;#; USETIME_AI = 0
FOR LOCAL, 0, MAX_COUNTRY
	勢力 = 勢力行動順:LOCAL
	SIF !IS_COUNTRY(勢力) || (勢力 == CFLAG:MASTER:所属 && CONFIG:302 != 1)
		CONTINUE
	SIF FLAG:戦死エンドフラグ || FLAG:強制エンドフラグ || (COUNTRY_EVENT_ID:勢力 == SP_COUNTRY_ID:特殊勢力_野盗 && TMP_OWN_CITY:勢力 <= 0)
		CONTINUE
	;#; USETIME = GETMILLISECOND();
	CALL AI_ACTION(勢力)
	CALL SINGLE_DRAWLINE
	;#; USETIME = GETMILLISECOND() - USETIME;
	;#; USETIME_AI += USETIME
	;;#; DEBUGPRINTFORML %ANAME(GET_COUNTRY_BOSS(LOCAL:LOCAL))%AI : {USETIME}ms------------
NEXT

;#; DEBUGPRINTFORML AI TOTAL: {USETIME_AI}ms

CLEARLINE 1

FOR LOCAL, 0, MAX_COUNTRY
	IF COUNTRY_EVENT_ID:LOCAL == SP_COUNTRY_ID:(特殊勢力_野盗) && TMP_OWN_CITY:LOCAL == 0
		CALL BANDIT_AI(LOCAL)
	ENDIF
NEXT

;自軍のクールタイム減少処理と、このターンに割り当てたフラグ削除処理
FOR LOCAL, 0, CHARANUM
	IF CFLAG:LOCAL:所属 == CFLAG:MASTER:所属
		COOLTIME:LOCAL:0 = MAX(COOLTIME:LOCAL:0 - 1 , 0)
		ASSIGNED_THIS_TURN:LOCAL:0 = 0
	ENDIF
NEXT

IF DAY >= SLG_PP:1
	表示フラグ = 0
	CUSTOMDRAWLINE =
	PRINTFORML 部隊行動フェイズ
	CUSTOMDRAWLINE =
	;自軍の部隊処理
	IF CFLAG:MASTER:所属 >= 1
		CALL COUNTRY_TURNEND(CFLAG:MASTER:所属)
		表示フラグ = 1
	ENDIF
	FOR LOCAL, 0, MAX_COUNTRY
		勢力 = 勢力行動順:LOCAL
		SIF !IS_COUNTRY(勢力) || 勢力 == CFLAG:MASTER:所属
			CONTINUE
		SIF FLAG:戦死エンドフラグ || FLAG:強制エンドフラグ || (COUNTRY_EVENT_ID:勢力 == SP_COUNTRY_ID:特殊勢力_野盗 && TMP_OWN_CITY:勢力 <= 0)
			CONTINUE
		SIF 表示フラグ
			CALL SINGLE_DRAWLINE
		CALL COUNTRY_TURNEND(勢力)
		表示フラグ = 1
	NEXT

	CUSTOMDRAWLINE =
	PRINTFORML 都市火力支援
	CUSTOMDRAWLINE =
	FOR LOCAL, 0, MAX_COUNTRY
		勢力 = 勢力行動順:LOCAL
		SIF !IS_COUNTRY(勢力) || 勢力 == CFLAG:MASTER:所属
			CONTINUE
		SIF FLAG:戦死エンドフラグ || FLAG:強制エンドフラグ || (COUNTRY_EVENT_ID:勢力 == SP_COUNTRY_ID:特殊勢力_野盗 && TMP_OWN_CITY:勢力 <= 0)
			CONTINUE
		CALL TURNEND_CITY_ATTACK(勢力)
	NEXT


	;観戦モード以外だとこの後拠点フェイズにそのまま行ってしまうので、その前に勢力変化を表示
	IF !FLAG:観戦モード
		CUSTOMDRAWLINE =
		PRINTFORML 部隊行動後の勢力図
		CUSTOMDRAWLINE =
		CALL SET_CITY_COLOR_UNIT
		CALL SET_CITY_COLOR_COUNTRY
		CALL DRAWMAP
		CALL RESET_CITY_COLOR
	ENDIF
ENDIF

IF DAY >= SLG_PP:1
	CUSTOMDRAWLINE =
	PRINTFORML 雇用・説得フェイズ
	CUSTOMDRAWLINE =
	;#; USETIME = GETMILLISECOND();
	FOR LOCAL, 0, MAX_COUNTRY
		SIF !IS_COUNTRY(LOCAL) || IS_SP_COUNTRY(LOCAL) || CFLAG:MASTER:所属 == LOCAL
			CONTINUE
		CALL SLG_AI_RECRUITMENT(LOCAL)
		CALL SLG_AI_PERSUASION(LOCAL)
	NEXT
	;#; USETIME = GETMILLISECOND() - USETIME;
	;#; DEBUGPRINTFORML PERSUASION TOTAL: {USETIME}ms
	CUSTOMDRAWLINE =
	PRINTFORML 在野武将雇用フェイズ
	CUSTOMDRAWLINE =
	CALL SLG_AI_OFFICER_JOBHUNT()
ELSE
	CUSTOMDRAWLINE =
	PRINTFORML 雇用フェイズ
	CUSTOMDRAWLINE =
	;#; USETIME = GETMILLISECOND();
	FOR LOCAL, 0, MAX_COUNTRY
		SIF !IS_COUNTRY(LOCAL) || IS_SP_COUNTRY(LOCAL) || CFLAG:MASTER:所属 == LOCAL
			CONTINUE
		CALL SLG_AI_RECRUITMENT(LOCAL)
	NEXT
	;#; USETIME = GETMILLISECOND() - USETIME;
	;#; DEBUGPRINTFORML PERSUASION TOTAL: {USETIME}ms
ENDIF

; CUSTOMDRAWLINE =
; PRINTFORML 投資フェイズ
; CUSTOMDRAWLINE =
FOR LOCAL, 0, MAX_COUNTRY
	SIF !IS_COUNTRY(LOCAL) || IS_SP_COUNTRY(LOCAL) || CFLAG:MASTER:所属 == LOCAL
		CONTINUE
	CALL SLG_AI_INVEST(LOCAL)
NEXT


; CUSTOMDRAWLINE =
; PRINTFORML 訓練フェイズ
; CUSTOMDRAWLINE =
FOR LOCAL, 0, MAX_COUNTRY
	SIF !IS_COUNTRY(LOCAL) || IS_SP_COUNTRY(LOCAL) || CFLAG:MASTER:所属 == LOCAL
		CONTINUE
	CALL SLG_AI_TRAIN(LOCAL)
NEXT

SIF FLAG:戦死エンドフラグ || FLAG:強制エンドフラグ
	GOTO DEAD




;同盟・連合の期限チェック
CALL TREATY_TURNEND

;特殊勢力の蜂起判定
;まず呼び出し用文字列を用意
;用意できれば確率判定を呼び、判定関数があって通っていれば蜂起
FOR LOCAL, 0, MAX_SP_COUNTRY
	LOCALS = %SP_COUNTRY_NAME_ENG:LOCAL%
	IF LOCALS != ""
		TRYCCALLFORM %LOCALS%_RISE_RATE()
			SIF RESULT
				TRYCALLFORM %LOCALS%_RISE()
		CATCH
		ENDCATCH
	ENDIF
NEXT

;特殊勢力によるターンエンド
FOR LOCAL, 0, MAX_COUNTRY
	TRYCALLFORM TURNEND_%SP_COUNTRY_NAME_ENG:SP_COUNTRY_TO_CONST(LOCAL)%
NEXT

;シナリオ固有のイベント
TRYCALLFORM SCENARIO_EVENT_%SCENARIOID%

;ランダムな謀反処理
IF !DAILY_GET_DISABLE_CONFIG("RANDOM_RISE") && !FLAG:クリアフラグ
	CALL SLG_RANDOM_INDEPENDENCE
	CALL SLG_RANDOM_RISE
ENDIF

;放浪士官で自国に誘ったキャラがいれば主人公勢力へ加入
CALL GO_TO_MASTERS_COUNTRY(0)

$DEAD

;エンディング・ゲームオーバーのチェック
CALL ENDING_CHECK

;デッドエンディングなら戻る
SIF FLAG:強制エンドフラグ
	RETURN 1


;各国軍の徴兵処理
FOR LOCAL:0, 0, MAX_COUNTRY
	SIF IS_COUNTRY(LOCAL:0)
		CALL COUNTRY_ADD_SOLDIER(LOCAL:0)
NEXT

;疲労度の回復ならびに戦闘済みフラグの解除
FOR LOCAL:0, 0, MAX_COUNTRY
	FOR LOCAL:1, 0, 10
		SIF UNIT_SOLDIER:(LOCAL:0):(LOCAL:1) <= 0
			CONTINUE
		SIF !UNIT_FBATTLE:(LOCAL:0):(LOCAL:1)
			UNIT_TIRED_COUNT:(LOCAL:0):(LOCAL:1) = MAX(UNIT_TIRED_COUNT:(LOCAL:0):(LOCAL:1) - (RAND:3 + 3), 0)
		UNIT_FBATTLE:(LOCAL:0):(LOCAL:1) = 0
	NEXT
NEXT

FOR LOCAL:0, 0, MAX_COUNTRY
	SIF DIPLOMACY_HATE:LOCAL > 0
		DIPLOMACY_HATE:LOCAL --
NEXT

;AI更新
FOR LOCAL:0, 0, MAX_COUNTRY
	SIF !IS_COUNTRY(LOCAL)
		CONTINUE
	CALL SET_COUNTRY_AI_TYPE(LOCAL)
NEXT

;統計情報の記憶
CALL STATS_SAVE

;自動送金
SIF !FLAG:クリアフラグ
	CALL AUTO_SENDMONEY


;外交済みフラグの解除
VARSET DONE_DIPLOMACY_FRIENDSHIP, 0
VARSET DONE_DIPLOMACY_REQUEST, 0
VARSET DONE_DIPLOMACY_SCANDAL, 0

;領地探索フラグを折る
VARSET DONE_TERRITORYSEARCH, 0

;計略によるパワー1フラグの解除
CVARSET CFLAG, 34, 0

;強要行為によるヘイトのクールダウン
;FLAG:99 = MAX(FLAG:99 - MAX(10 - CONFIG:300 * 2, 0), 0)

;-------------------------------------------------
;ARG:0番の勢力の部隊処理
;-------------------------------------------------
@COUNTRY_TURNEND(ARG:0)
#DIM LCOUNT, 3
SETCOLOR COUNTRY_COLOR:(ARG:0)
PRINTFORML %ANAME(GET_COUNTRY_BOSS(ARG:0))%軍行動中...
RESETCOLOR

CALL SINGLE_EMPTY_LINE()
[IF_DEBUG]
;DEBUGPRINTFORM この時点で存在する部隊:
;FOR LOCAL, 0, 10
;	SIF UNIT_SOLDIER:(ARG:0):(LOCAL:0) > 0
;		DEBUGPRINTFORM {LOCAL} 
;NEXT
;DEBUGPRINTFORML
[ENDIF]

CALL TURNEND_UNIT_MOVE(ARG:0)

CALL TURNEND_UNIT_BATTLE(ARG:0)

CALL KILL_EMPTY_LINE()

;-------------------------------------------------
;部隊の移動
;-------------------------------------------------
@TURNEND_UNIT_MOVE(勢力)
#DIM 勢力
#DIM 部隊
#DIM ポジション
#DIM 士官
#DIM 中継点
#DIM 部隊現在地
#DIM 部隊目的地
#DIM 経路判定

FOR 部隊, 0, MAX_UNIT
	SIF UNIT_POSITION:勢力:部隊 == 0
		CONTINUE
	SIF UNIT_SOLDIER:勢力:部隊 <= 0
		CONTINUE
	SIF UNIT_FBATTLE:勢力:部隊
		CONTINUE
	部隊現在地 = UNIT_POSITION:勢力:部隊
	部隊目的地 = UNIT_TARGET:勢力:部隊
	;停戦中の都市が目的地なら目的地を解除
	IF TMP_COUNTRY_RELATION:勢力:(CITY_OWNER:部隊目的地) == 1
		UNIT_TARGET:勢力:部隊 = 0
		CONTINUE
	ENDIF

	;敵がいたら移動できない
	SIF TMP_IS_STAY_ENEMY_UNIT(部隊現在地, 勢力)
		CONTINUE

	経路判定 = IS_ROUTE(部隊現在地, 部隊目的地)

	IF 経路判定 == 1
		CALL MOVE_UNIT(勢力, 部隊, 部隊目的地, 1)
	ELSEIF 経路判定 == 2
		中継点 = GET_RELAYPOINT(部隊現在地, 部隊目的地)
		IF 中継点 > 0
			CALL MOVE_UNIT(勢力, 部隊, 中継点, 0)
		ELSE
			;ありえないはずだが念のため
			UNIT_TARGET:勢力:部隊 = 0
		ENDIF
	;ありえないはずだが念のため
	ELSE
		UNIT_TARGET:勢力:部隊 = 0
	ENDIF
NEXT

;-------------------------------------------------
;部隊の戦闘
;もともとの処理がゴミだったので関数として切り出してリファクタ。
;-------------------------------------------------
@TURNEND_UNIT_BATTLE(勢力)
#DIM 勢力
#DIM 部隊
#DIM 敵部隊
#DIM 敵勢力
#DIM ループ
#DIM 敵勢力リスト, VARSIZE("TMP_UNIT_ONCITY_CNT", 1)
#DIM 敵部隊リスト, VARSIZE("TMP_UNIT_ONCITY_CNT", 1)
#DIM 兵力リスト, VARSIZE("TMP_UNIT_ONCITY_CNT", 1)
#DIM 敵の数
#DIM 部隊現在地
#DIM 攻撃対象

VARSET 敵勢力リスト, 0
VARSET 敵部隊リスト, -1
VARSET 敵の数

FOR 部隊, 0, MAX_UNIT
	SIF UNIT_POSITION:勢力:部隊 == 0
		CONTINUE
	SIF UNIT_SOLDIER:勢力:部隊 <= 0
		CONTINUE

	;行動済みなら戦闘しない
	;別の部隊に攻撃された場合にここに該当する
	SIF UNIT_FBATTLE:勢力:部隊
		CONTINUE

	;現在値にいる敵性部隊をリスト化
	部隊現在地 = UNIT_POSITION:勢力:部隊
	敵の数 = 0
	FOR ループ, 0, VARSIZE("TMP_UNIT_ONCITY_CNT", 1)
		敵勢力 = TMP_UNIT_ONCITY_CNT:部隊現在地:ループ
		敵部隊 = TMP_UNIT_ONCITY_NUM:部隊現在地:ループ
		IF 敵勢力 > 0 && UNIT_SOLDIER:敵勢力:敵部隊 > 0 && TMP_COUNTRY_RELATION:勢力:敵勢力 == 0
			敵勢力リスト:敵の数 = 敵勢力
			敵部隊リスト:敵の数 = 敵部隊
			兵力リスト:敵の数 = UNIT_SOLDIER:敵勢力:敵部隊
			敵の数 ++
		ENDIF
	NEXT
	;敵がいなければ、防衛部隊との戦闘に入る判定まで飛ぶ
	SIF 敵の数 == 0
		GOTO VS_CASTLE

	IF 敵の数 == 1
		攻撃対象 = 0
	ELSE
		IF 勢力 != CFLAG:MASTER:所属
			攻撃対象 = FINDELEMENT(兵力リスト, MINARRAY(兵力リスト, 0, 敵の数))
		ELSE
			PRINTFORML 我が軍の第{部隊 + 1}部隊の現在地である%GET_RELAYNAME(部隊現在地)%には複数の敵部隊が存在します
			PRINTL どの部隊を攻撃しますか？
			PRINTFORM 自軍第{部隊 + 1}部隊 
			CALL SHOW_UNIT_INFO_SIMPLE(CFLAG:MASTER:所属, 部隊)

			FOR ループ, 0, 敵の数
				敵勢力 = 敵勢力リスト:ループ
				敵部隊 = 敵部隊リスト:ループ
				PRINTFORM [{ループ, 2}] %SNAME(GET_COUNTRY_BOSS(敵勢力)), 6%軍
				CALL SHOW_UNIT_INFO_SIMPLE(敵勢力, 敵部隊)
			NEXT
			PRINTL [99] 攻撃しない

			$INPUT_LOOP_SETTARGET
			INPUT
			IF INRANGE(RESULT, 0, 敵の数 - 1)
				攻撃対象 = RESULT
			ELSEIF RESULT == 99
				攻撃対象 = -1
			ELSE
				GOTO INPUT_LOOP_SETTARGET
			ENDIF
		ENDIF
	ENDIF

	SIF 攻撃対象 < 0
		CONTINUE
	敵勢力 = 敵勢力リスト:攻撃対象
	敵部隊 = 敵部隊リスト:攻撃対象

	CALL BATTLE_UNIT_TO_UNIT(勢力, 部隊, 敵勢力リスト:攻撃対象, 敵部隊リスト:攻撃対象)
	CALL SINGLE_EMPTY_LINE()

	;敵性部隊が１部隊だった場合、その部隊を撃破すれば続けて防衛部隊との戦闘に入る
	SIF 敵の数 != 1 || UNIT_SOLDIER:敵勢力:敵部隊 > 0
		CONTINUE

	$VS_CASTLE

	敵勢力 = CITY_OWNER:部隊現在地
	IF 部隊現在地 > 0 && CITY_TYPE:部隊現在地 == 0 && TMP_COUNTRY_RELATION:勢力:敵勢力 == 0
		CALL BATTLE_UNIT_TO_CITY(勢力, 部隊, 部隊現在地)
		CALL SINGLE_EMPTY_LINE()
	ENDIF
NEXT

;-------------------------------------------------
;都市からの援護攻撃
;-------------------------------------------------
@TURNEND_CITY_ATTACK(勢力)
#DIM 勢力
#DIM 都市
#DIM 敵部隊
#DIM 敵勢力
#DIM 攻撃対象
#DIM ループ

FOR 都市, 0, MAX_CITY
	;その勢力の都市でないか、すでに殴られているか、守備配備してないなら無視
	SIF CITY_OWNER:都市 != 勢力 || CITY_IS_ATTACKED:都市 || CITY_SOLDIER:都市 <= 0
		CONTINUE

	FOR 攻撃対象, 0, VARSIZE("TMP_UNIT_ONCITY_CNT", 1)
		敵勢力 = TMP_UNIT_ONCITY_CNT:都市:攻撃対象
		敵部隊 = TMP_UNIT_ONCITY_NUM:都市:攻撃対象
		SIF !IS_COUNTRY(敵勢力) || UNIT_SOLDIER:敵勢力:敵部隊 <= 0 || TMP_COUNTRY_RELATION:勢力:敵勢力 > 0
			CONTINUE
		CALL COLORPRINT(@"%SNAME(GET_COUNTRY_BOSS(勢力)), MAX_CHARANAME_LENGTH / 2, LEFT%の所領である%GET_CITYNAME(都市)%からの援護攻撃！", COUNTRY_COLOR:勢力, "L")
		CALL DECREASE_SOLDIER(敵勢力, 敵部隊, MIN(MAX(1000, UNIT_SOLDIER:敵勢力:敵部隊 / 10), UNIT_SOLDIER:敵勢力:敵部隊 - 1), 1)
		;自勢力のみウェイト
		IF (勢力 == CFLAG:MASTER:所属 || 敵勢力 == CFLAG:MASTER:所属 || FLAG:観戦モード) && CFLAG:MASTER:捕虜先 == 0
			WAIT
		ENDIF
	NEXT
NEXT

;-------------------------------------------------
;同盟・連合の期限チェック
;-------------------------------------------------
@TREATY_TURNEND
#DIM 勢力
#DIM 参加勢力, 2
#DIM 条約

;★
;FOR LOCAL:0, 0, MAX_TREATY_A
;	PRINTFORM No.{LOCAL:0, 2, LEFT} 期間:{TREATY_A_TERM:(LOCAL:0)} 
;	FOR LOCAL:1, 0, MAX_TREATY_COUNTRY
;		IF TREATY_A_COUNTRY:(LOCAL:0):(LOCAL:1) >= 1
;			PRINTFORM {LOCAL:1}-{TREATY_A_COUNTRY:(LOCAL:0):(LOCAL:1)} 
;		ENDIF
;	NEXT
;	PRINTL 
;NEXT
CUSTOMDRAWLINE =
PRINTFORML 外交・同盟終了確認
CUSTOMDRAWLINE =

;同盟のチェック
FOR 条約, 0, MAX_TREATY_A
	SIF TREATY_A_TERM:条約 <= 0 || TREATY_A_TERM:条約 == 9999
		CONTINUE
	TREATY_A_TERM:条約 --
	;期限切れによる解散
	IF TREATY_A_TERM:条約 == 0
		参加勢力:0 = TREATY_A_COUNTRY:条約:0
		参加勢力:1 = TREATY_A_COUNTRY:条約:1
		CALL BREAK_ALLIANCE(参加勢力:0, 参加勢力:1, 条約)
	ENDIF
NEXT

;停戦のチェック
FOR 条約, 0, MAX_TREATY_C
	SIF TREATY_C_TERM:条約 <= 0 || TREATY_C_TERM:条約 == 9999
		CONTINUE
	TREATY_C_TERM:条約 --
	;期限切れによる解散
	IF TREATY_C_TERM:条約 == 0
		参加勢力:0 = TREATY_C_COUNTRY:条約:0
		参加勢力:1 = TREATY_C_COUNTRY:条約:1
		CALL BREAK_CEASEFIRE(参加勢力:0, 参加勢力:1, 条約)
	ENDIF
NEXT

FOR 条約, 0, MAX_TREATY_U
	SIF TREATY_U_TERM:条約 <= 0 || TREATY_U_TERM:条約 == 9999
		CONTINUE
	TREATY_U_TERM:条約 --
	SIF TREATY_U_TERM:条約 == 0
		CALL BREAK_UNION(条約)
NEXT

CALL KILL_EMPTY_LINE()
RESETCOLOR

;-------------------------------------------------
;ARG:0番の勢力の徴兵処理
;-------------------------------------------------
@COUNTRY_ADD_SOLDIER(ARG:0)
#DIM LCOUNT
;増加する兵数は経済規模×0.5(警邏・歌唱などによる補正あり)
;最大兵数は経済規模×10

;士官が部隊に所属しているかどうかのリストを作成
CALL TMP_CREATE_IS_FREE_MAP

;歌唱パワー・政治パワーを取得
LOCAL:7 = 0
LOCAL:8 = 0
FOR LOCAL:0, 0, CHARANUM
	IF CFLAG:(LOCAL:0):所属 == ARG:0 && TMP_IS_FREE:(LOCAL:0):0 == 0
		;政治の補正
		LOCAL:7 += ABL_POWER((ABL:(LOCAL:0):政治 * 7 + ABL:(LOCAL:0):武闘 * 3) / 10, LOCAL:0)
		LOCAL:8 += ABL_POWER(ABL:(LOCAL:0):歌唱, LOCAL:0)
	ENDIF
NEXT
LOCAL:7 = SQRT(LOCAL:7) * 3 / 2 + SQRT(LOCAL:8) * 5 / 4

LOCAL:0 = GET_SUM_ECONOMY(ARG:0) / 100
LOCAL:1 = GET_SUM_SOLDIER(ARG:0)
LOCAL:2 = LOCAL:0 * (( ARG:0 == CFLAG:MASTER:所属 ? FLAG:兵数増加追加値 # 0) + LOCAL:7 + 10) * 5 / 10000
LOCAL:3 = MAX(LOCAL:0 * 10 - LOCAL:1, 0)

;政策による補正
SIF COUNTRY_POLICY:(ARG:0) == 政策_徴兵
	TIMES LOCAL:2, 1.50



;AIタイプに応じた兵数の増減
;IF ARG:0 != CFLAG:MASTER:所属
;	SELECTCASE COUNTRY_AI_TYPE:(ARG:0)
;		CASE AI_好戦
;			TIMES LOCAL:2, 1.10
;		CASE AI_内政
;			TIMES LOCAL:2, 0.90
;	ENDSELECT
;ENDIF

LOCAL:4 = MIN(LOCAL:2, LOCAL:3)
LOCAL:8 = (LOCAL:4 == 0)
;人気持ち一人につき5%増加
;50%まで
LOCAL:5 = 0
FOR LCOUNT, 0, CHARANUM
	IF TMP_IS_FREE:LCOUNT:0 ==0 && TALENT:LCOUNT:人気 && CFLAG:LCOUNT:所属 == ARG:0
		LOCAL:4 += MAX(LOCAL:4 * 5 / 100, 1)
		LOCAL:5 ++
		SIF LOCAL:5 == 10
			BREAK
	ENDIF
NEXT

COUNTRY_SOLDIER:(ARG:0) += LOCAL:4

IF ARG:0 == CFLAG:MASTER:所属 && LOCAL:4 > 0
	PRINTFORMW 我が国の兵数が{LOCAL:4}だけ増加しました
	SIF LOCAL:8 == 1
		CALL COLORPRINT(@"徴兵の限界に達しています、これ以上兵を賄うには経済を増やすか、臨時徴兵をする必要があります", カラー_注意, "L")
ENDIF

;防衛兵数が最低数を割っている都市があるなら自動配分
LOCAL:5 = 0
FOR LOCAL:0, 0, MAX_CITY
	IF CITY_OWNER:(LOCAL:0) == ARG:0 && CITY_SOLDIER:(LOCAL:0) < 500 && COUNTRY_SOLDIER:(ARG:0) > 0
		;敵部隊のいる都市は増減不可
		CALL GET_STAY_ENEMY_UNIT(LOCAL:0)
		IF RESULT:0 < 0
			LOCAL:6 = MIN(500 - CITY_SOLDIER:(LOCAL:0), COUNTRY_SOLDIER:(ARG:0))
			CITY_SOLDIER:(LOCAL:0) += LOCAL:6
			COUNTRY_SOLDIER:(ARG:0) -= LOCAL:6
			LOCAL:5 = 1
			IF ARG:0 == CFLAG:MASTER:所属
				PRINTFORML %GET_CITYNAME(LOCAL:0)%の防衛兵数を{LOCAL:6}だけ補充しました
			ENDIF
		ENDIF
	ENDIF
NEXT
IF ARG:0 == CFLAG:MASTER:所属 && LOCAL:5
	WAIT
ENDIF

;-------------------------------------------------
;各勢力都市の経済規模変動(実際の呼び出しはTURNEND.ERB)
;-------------------------------------------------
@VARY_ECONOMY
#DIM CITY_DAMAGE, 3
#DIM ECONOMY_POWER, MAX_COUNTRY, 3

FOR LOCAL:0, 0, MAX_CITY
	VARSET CITY_DAMAGE
	VARSET ECONOMY_POWER

	;都市の戦闘フラグを消す
	CITY_IS_ATTACKED:(LOCAL:0) = 0

	;その場所で戦闘があった都市の経済規模を減少させる
	;CITY_IS_ATTACKEDは都市が直接殴られたときのフラグであり、都市上での部隊VS部隊を参照できない。
	;なのでCITY_TIRED_COUNTを利用する。
	CITY_DAMAGE:0 = CITY_TIRED_COUNT:(LOCAL:0) - PAST_CITY_TIRED_COUNT:(LOCAL:0)
	IF CITY_DAMAGE:0 > 0
		FOR CITY_DAMAGE:1, 0, MAX(CITY_DAMAGE:0 / 2, 1)
			CITY_DAMAGE:2 += RAND:3
			SIF CITY_DAMAGE:2 >= 20
				BREAK
		NEXT
		CITY_ECONOMY:(LOCAL:0) = MAX(CITY_ECONOMY:(LOCAL:0) - (CITY_ECONOMY:(LOCAL:0) * MIN(CITY_DAMAGE:2, 20) / 400), 500)
		CITY_ECONOMY_LIMIT:(LOCAL:0) = MAX(CITY_ECONOMY_LIMIT:(LOCAL:0) - (CITY_ECONOMY_LIMIT:(LOCAL:0) * MIN(CITY_DAMAGE:2, 20) / 800), 500)
	ENDIF
NEXT

;各士官が行動可能な状態にあるかどうかのマップ作成(高速化用)
CALL TMP_CREATE_IS_FREE_MAP

;キャラごとの補正計算を勢力ごとに集約
FOR LOCAL, 0, CHARANUM
	IF CFLAG:(LOCAL:0):所属 && TMP_IS_FREE:(LOCAL:0):0 == 0
		;政治の補正
		ECONOMY_POWER:(CFLAG:(LOCAL:0):所属):0 += ABL_POWER((ABL:(LOCAL:0):政治 * 7 + ABL:(LOCAL:0):知略 * 3) / 10, LOCAL:0)
		
		;料理の補正／能力50以下は切り捨てる
		ECONOMY_POWER:(CFLAG:(LOCAL:0):所属):1 += ABL_POWER(ABL:(LOCAL:0):料理, LOCAL:0)
	ENDIF
NEXT

IF CFLAG:MASTER:所属
	ECONOMY_POWER:(CFLAG:MASTER:所属):0 += FLAG:経済成長追加値
	ECONOMY_POWER:(CFLAG:MASTER:所属):1 += FLAG:経済成長追加値
ENDIF

;勢力ごとに計算
FOR LOCAL:0, 0, MAX_COUNTRY
	IF IS_COUNTRY(LOCAL:0) && GET_SUM_ECONOMY(LOCAL:0) && GET_OWN_CITY(LOCAL:0) > 0
		LOCAL:5 = SQRT(ECONOMY_POWER:(LOCAL:0):0) * 50 + SQRT(ECONOMY_POWER:(LOCAL:0):1) * 30

		;増加率に応じて減衰
		SELECTCASE LOCAL:5 * 100 / GET_SUM_ECONOMY(LOCAL:0)
		CASE  0 TO 5
		CASE  6 TO 10
			TIMES LOCAL:5, 0.95
		CASE 11 TO 20
			TIMES LOCAL:5, 0.90
		CASE 21 TO 35
			TIMES LOCAL:5, 0.85
		CASE 36 TO 50
			TIMES LOCAL:5, 0.80
		CASE IS > 51
			TIMES LOCAL:5, 0.75
		CASEELSE
			TIMES LOCAL:5, 0.50
		ENDSELECT

		SIF COUNTRY_POLICY:(LOCAL:0) == 政策_経済
			TIMES LOCAL:5, 1.20

;		;内政型だとさらに1.1倍
;		SELECTCASE COUNTRY_AI_TYPE:(LOCAL:0)
;		CASE AI_内政
;			SIF LOCAL != CFLAG:MASTER:所属
;				TIMES LOCAL:5, 1.10
;		CASEELSE
;		ENDSELECT
		
		;成長値に所有都市数の補正を掛けて都市を成長させる
		LOCAL:6 = GET_OWN_CITY(LOCAL:0)
		CALL GROW_COUNTRY_ECONOMY(LOCAL:0, LOCAL:5 * LOCAL:6 / (LOCAL:6 + 3))
	ENDIF
NEXT

;-------------------------------------------------
;税収処理関数
;-------------------------------------------------
@GAIN_COUNTRY_TAX
#DIM TAX_VALUE
#DIM POLICY
#DIM TAX_COUNT, 10
#DIM TAX, 2

VARSET TAX_COUNT
VARSET TAX_VALUE
VARSET POLICY
VARSET TAX

FOR TAX_COUNT:0, 0, MAX_CITY
	SIF CITY_TYPE:(TAX_COUNT:0) || CITY_OWNER:(TAX_COUNT:0) == 0
		CONTINUE
	;政策による税率調整
	SELECTCASE COUNTRY_POLICY:(CITY_OWNER:(TAX_COUNT:0))
	CASE 政策_経済
		TAX_VALUE = 100
	CASE 政策_防衛
		TAX_VALUE = 80
	CASE 政策_徴兵
		TAX_VALUE = 60
	ENDSELECT
	TAX = CITY_ECONOMY:(TAX_COUNT:0) * TAX_VALUE / (100 * 100)
	SIF CITY_OWNER:(TAX_COUNT:0) == CFLAG:MASTER:所属
		TAX:1 += TAX
	MONEY:(CITY_OWNER:(TAX_COUNT:0)) += TAX
NEXT

IF TAX:1
	PRINTFORML 領地からの徴税が行われました
	PRINTFORML 国庫＋{TAX:1}（現在:{MONEY:(CFLAG:MASTER:所属)}）
ENDIF


;-------------------------------------------------
;ARG:0勢力の都市の経済規模を合計ARG:1だけ成長させる関数
;-------------------------------------------------
@GROW_COUNTRY_ECONOMY(ARG:0, ARG:1)
;乱数制御に使用
#DIM CUT_POS, MAX_CITY

;所有都市ごとの成長率を、合計成長量を一定にしつつランダムに設定
LOCAL:12 = GET_OWN_CITY(ARG:0)
LOCAL:13 = LOCAL:12 * 70
CUT_POS:0 = 0
CUT_POS:(LOCAL:12) = LOCAL:13
FOR LOCAL:1, 1, LOCAL:12
	CUT_POS:(LOCAL:1) = RAND:(LOCAL:13)
	FOR LOCAL:2, 1, LOCAL:1
		IF CUT_POS:(LOCAL:1) < CUT_POS:(LOCAL:2)
			FOR LOCAL:3, LOCAL:1, LOCAL:2, -1
				SWAP CUT_POS:(LOCAL:3 - 1), CUT_POS:(LOCAL:3)
			NEXT
		ENDIF
	NEXT
NEXT

;成長値に応じて都市を成長させる
LOCAL:14 = 0
FOR LOCAL:1, 0, MAX_CITY
	IF CITY_OWNER:(LOCAL:1) == ARG:0
		CITY_ECONOMY:(LOCAL:1) += ARG:1 * (CUT_POS:(LOCAL:14 + 1) - CUT_POS:(LOCAL:14) + 30) / (LOCAL:12 * 100)

		;経済規模が限界値を超えていれば限界値が上昇
		IF CITY_ECONOMY:(LOCAL:1) > CITY_ECONOMY_LIMIT:(LOCAL:1)
			CITY_ECONOMY_LIMIT:(LOCAL:1) += (CITY_ECONOMY:(LOCAL:1) - CITY_ECONOMY_LIMIT:(LOCAL:1)) / 20
			CITY_ECONOMY_LIMIT:(LOCAL:1) = MIN(CITY_ECONOMY_LIMIT:(LOCAL:1), 999900)
			CITY_ECONOMY:(LOCAL:1) = CITY_ECONOMY_LIMIT:(LOCAL:1)
		ENDIF
		LOCAL:14 ++
	ENDIF
NEXT

;-------------------------------------------------
;都市の疲労度のリセット　呼び出しはTURNEND_COMMON
;-------------------------------------------------
@RESET_CITY_TIRED_COUNT()

VARSET CITY_IS_ATTACKED, 0

;このターンその都市で戦闘が起こらなければ、疲労度はリセットされる
FOR LOCAL, 0, MAX_CITY
	SIF CITY_TIRED_COUNT:LOCAL == PAST_CITY_TIRED_COUNT:LOCAL
		CITY_TIRED_COUNT:LOCAL = 0
NEXT

;このターンの最終的な都市疲労度をコピーして戻す
ARRAYCOPY "CITY_TIRED_COUNT" , "PAST_CITY_TIRED_COUNT"


;-------------------------------------------------
;自国へ誘った士官の移動 ARG:0は移動元の勢力番号
;-------------------------------------------------
@GO_TO_MASTERS_COUNTRY(ARG:0)
FOR LOCAL:0, 0, CHARANUM
	SIF CFLAG:(LOCAL:0):所属 != ARG:0 || !CFLAG:(LOCAL:0):自国勧誘成功フラグ
		CONTINUE
	;死亡状態ならフラグをクリア
	IF CFLAG:(LOCAL:0):特殊状態 == 特殊状態_死亡
		CFLAG:(LOCAL:0):自国勧誘成功フラグ = 0
	;現時点で他国の捕虜になっている場合は一時保留
	ELSEIF CFLAG:(LOCAL:0):捕虜先 >= 1 && CFLAG:(LOCAL:0):捕虜先 != CFLAG:MASTER:所属
	;現時点で主人公が放浪状態ならフラグをクリア
	ELSEIF CFLAG:MASTER:所属 == 0
		CFLAG:(LOCAL:0):自国勧誘成功フラグ = 0
	;それ以外なら主人公の国家へ移動
	ELSE
		LOCAL:2 = GET_COUNTRY_BOSS(CFLAG:(LOCAL:0):所属)
		SETCOLOR カラー_オレンジ
		IF LOCAL:2 >= 0
			PRINTFORMW %ANAME(LOCAL:0)%は%ANAME(LOCAL:2)%勢力を抜けだし、%ANAME(MASTER)%の元に駆け付けました
		ELSE
			PRINTFORMW %ANAME(LOCAL:0)%は%ANAME(MASTER)%の元に駆け付けました
		ENDIF
		RESETCOLOR
		CALL CHANGE_COUNTRY(LOCAL:0, CFLAG:MASTER:所属, 1)
		CFLAG:(LOCAL:0):自国勧誘成功フラグ = 0
		;対象国家との関係が悪化
		CALL CHANGE_RELATION_C_TO_C(ARG:0, CFLAG:MASTER:所属, -125)
		;君主から主人公への印象はさらに悪化
		SIF LOCAL:2 >= 0
			CALL CHANGE_RELATION_O_TO_O(LOCAL:2, MASTER, -125)
	ENDIF
NEXT



;-------------------------------------------------
;ARG:0勢力のARG:1番の部隊に「人気」もちの武将が存在する場合、その部隊の兵数を増加させる処理
;-------------------------------------------------
;@IDOL_GATHER_SOLDIER(ARG:0, ARG:1)
;#DIM LCOUNT
;#DIM 武将
;#DIM 増加数
;FOR LCOUNT, 0, 3
;	武将 = GET_UNIT_COMMANDER(ARG:0, ARG:1, LCOUNT)
;	IF 武将 >= 0 && TALENT:武将:人気
;		増加数 = GET_SUM_ECONOMY(ARG:0) / 100
;		TIMES 増加数, 0.10
;		IF ARG:0 == CFLAG:MASTER:所属
;			PRINTFORML
;			PRINTFORML %ANAME(武将)%の人気っぷりが、部隊に人を集めているようだ……
;			PRINTFORM {ARG:1+1}番の部隊に
;			PRINTFORM {増加数}
;			PRINTFORML の義勇兵が集まりました
;			PRINTFORML 兵数:{UNIT_SOLDIER:(ARG:0):(ARG:1)} → {UNIT_SOLDIER:(ARG:0):(ARG:1) + 増加数}
;		ENDIF
;		UNIT_SOLDIER:(ARG:0):(ARG:1) += 増加数
;	ENDIF
;NEXT
;
